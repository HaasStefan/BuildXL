parameters:
- name: DropName
  type: string
  default: buildxl.dogfood.$(BuildXLPackageVersion)
- name: Role
  type: string
  default: Orchestrator
  values:
  - Orchestrator
  - Worker

jobs:
- job: Distributed_Clean
  ${{ if eq(parameters.Role, 'Worker') }}:
    strategy:
      parallel: 2

  displayName: Clean distributed build
  steps:
  - task: ms-vscs-artifact.build-tasks.artifactDropDownloadTask-1.artifactDropDownloadTask@1
    displayName: 'Download ${{ parameters.DropName }} from drop'
    inputs:
      dropServiceURI: 'https://mseng.artifacts.visualstudio.com/DefaultCollection'
      buildNumber: '${{ parameters.DropName }}'
      destinationPath: '$(Domino.DogfoodPackagePath)'
      rootPaths: 'release/win-x64'
      
  - checkout: self
    fetchDepth: 1
  
  - template: ../common/set-artifacts-pat.yml
    parameters:
      AzDevPAT: $(PAT-TseBuild-AzureDevOps-MsEng)

  - template: ../common/journaling.yml

  - script: |
      netsh advfirewall firewall add rule name="Open BuildXL inbound port" dir=in action=allow protocol=TCP localport=6979
      netsh advfirewall firewall add rule name="Open BuildXL outbound port" protocol=TCP localport=6979 action=allow dir=OUT
      netsh advfirewall firewall add rule name="Open Cache inbound port" dir=in action=allow protocol=TCP localport=7089
      netsh advfirewall firewall add rule name="Open Cache outbound port" protocol=TCP localport=7089 action=allow dir=OUT
    displayName: Setup firewall rules

  - template: /.azdo/common/set-variable-pats.yml

  - script: bxl.cmd $(BxlScriptArgs) $(BuildXLArgs) /logsDirectory:$(BuildXL.LogsDirectory)
    workingDirectory: $(BuildXL.RepoDirectory)
    displayName: 'Run clean selfhost build distributed'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      AdoBuildRunnerWorkerPipelineRole: ${{ parameters.Role }}
      AdoBuildRunnerInvocationKey: SelfhostClean
      1ESSHAREDASSETS_BUILDXL_FEED_PAT: $(1ESSHAREDASSETS_BUILDXL_FEED_PAT)
      CLOUDBUILD_BUILDXL_SELFHOST_FEED_PAT: $(CLOUDBUILD_BUILDXL_SELFHOST_FEED_PAT)
      MSENG_GIT_PAT: $(MSENG_GIT_PAT)
      VSTSPERSONALACCESSTOKEN: $(VSTSPERSONALACCESSTOKEN)
      ARTIFACT_CREDENTIALPROVIDERS_PATH: $(ARTIFACT_CREDENTIALPROVIDERS_PATH)
      CLOUDBUILD_BUILDXL_SELFHOST_FEED_PAT_B64: $(CLOUDBUILD_BUILDXL_SELFHOST_FEED_PAT_B64)
      VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: $(VSS_NUGET_EXTERNAL_FEED_ENDPOINTS)

  - ${{ if eq(parameters.Role, 'Orchestrator') }}:
    - powershell: |
        $bxlWithRemotingLogDir = "$(BuildXL.LogsDirectory)"
        $statsContent = Get-Content -Path (Join-Path $bxlWithRemotingLogDir "BuildXL.stats") | Out-String
        $stats = ConvertFrom-StringData -StringData $statsContent
        $runDistributedCount = $stats.Get_Item("PipExecution.ProcessesExecutedRemotely")
        
        Write-Host "Pips run on remote workers: $runDistributedCount"

        if ($runDistributedCount -eq 0)
        {
            Write-Error "##[error]No process pip ran in distributed workers."
            exit 1
        }
              
        exit 0
      displayName: 'Validate that distribution happened'

  - task: PublishPipelineArtifact@1
    displayName: 'Upload logs'
    inputs:
      targetPath: $(BuildXL.LogsDirectory)
    condition: always()
