parameters:
- name: platform
  type: string
  values:
  - win-x64
  - linux-x64
- name: pool
  type: object

jobs:
# Basic test: build, test, and run the installer with the default settings (it should use the global configuration)
# Then run bxl /help from the install location 
- job: basic_v1_${{ replace(parameters.platform, '-', '_') }}
  displayName: "[${{ parameters.platform }}] Basic integration test: install and run BuildXL (v1)"
  pool: ${{ parameters.pool }}
  variables:
    buildConfiguration: 'Release'

  steps:
  - checkout: self
    fetchDepth: 1
    fetchTags: false

  - template: /.azdo/common/use-latest-dotnet-sdk.yml@self

  - task: DotNetCoreCLI@2
    inputs:
      command: 'build'
      arguments: '--configuration $(buildConfiguration)'
      projects: 'Private/BuildToolsInstaller'
    displayName: 'Build Project'

  - task: DotNetCoreCLI@2
    inputs:
      command: 'test'
      projects: 'Private/BuildToolsInstaller'
      arguments: '--no-build --configuration $(buildConfiguration)'
    displayName: 'Run dotnet tests'

  - task: PowerShell@2
    displayName: Run installer
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |
        $config = @{
          'tools' = @(
            @{
              'tool' = 'BuildXL'
              'outputVariable' = 'BXL_LOCATION'
              'packageSelector' = '${{ parameters.pool.os }}'
            }
          )
        }

        $configPath = Join-Path $(Agent.TempDirectory) "buildToolInstallerConfig.json"
        $config | ConvertTo-Json | Set-Content -Path $configPath
        Get-Content -Path $configPath

        if ($IsWindows) {
          $executableName = "1ES.BuildToolsInstaller.exe"
        } else {
          $executableName = "1ES.BuildToolsInstaller"
        }

        $executablePath = Join-Path -Path $(Build.SourcesDirectory) -ChildPath "Private/BuildToolsInstaller/src/bin/$(buildConfiguration)/$executableName"

        $toolsDirectory = Join-Path $(Agent.TempDirectory) "SomeArbitraryLocation"
        & $executablePath install --toolsDirectory $toolsDirectory --config $configPath

  - task: PowerShell@2
    displayName: Run bxl /help from the installed location
    inputs:
      targetType: 'inline'
      script: |
        if ($IsWindows) {
            $executableName = "bxl.exe"
        } else {
            $executableName = "bxl"
        }

        $executablePath = Join-Path "$(BXL_LOCATION)" "$executableName"
        & $executablePath /help

- job:
  displayName: "[${{ parameters.platform }}] Integration test: worker mode (v1)"
  dependsOn: basic_v1_${{ replace(parameters.platform, '-', '_') }}
  pool: ${{ parameters.pool }}
  variables:
    buildConfiguration: 'Release'
    artifactName: '1ES.BuildToolsInstaller.${{ parameters.platform }}.zip'

  steps:
  - checkout: self
    fetchDepth: 1
    fetchTags: false

  - template: /.azdo/common/use-latest-dotnet-sdk.yml@self

  - task: DotNetCoreCLI@2
    inputs:
      command: 'build'
      arguments: '--configuration $(buildConfiguration)'
      projects: 'Private/BuildToolsInstaller'
    displayName: 'Build Project'
  
  # Integration test:
  # 1. Run installer in 'orchestrator' (default) mode. This should pick up the latest version from the configuration.
  #    Install a fixed version (0.1.0-20240802.2) so we can verify the worker picks up the same one without it coming from
  #    the global configuration 
  # 2. Run installer in 'worker' mode outputting to a separate location. This should install the same version as the one specified by the orchestrator
  #    Note that we don't specify the version override in the configuration, so it really is communicated by the other invocation
  - task: PowerShell@2
    displayName: Run installer in orchestrator and worker mode
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "##[command]Run the installer in orchestrator mode and output to 'Orch'"

        $config = @{
          'tools' = @(
            @{
              'tool' = 'BuildXL'
              'version' = '0.1.0-20240802.2'
              'outputVariable' = 'BXL_ORCH_LOCATION'
              'packageSelector' = '${{ parameters.pool.os }}'
              'additionalConfiguration' = 'distributedRole=Orchestrator;invocationKey=MyBuild_${{ parameters.platform }}'
            }
          )
        }

        $configPath = Join-Path $(Agent.TempDirectory) "buildToolInstallerConfig.json"
        $config | ConvertTo-Json | Set-Content -Path $configPath
        Get-Content -Path $configPath

        if ($IsWindows) {
          $executableName = "1ES.BuildToolsInstaller.exe"
        } else {
          $executableName = "1ES.BuildToolsInstaller"
        }

        $executablePath = Join-Path -Path $(Build.SourcesDirectory) -ChildPath "Private/BuildToolsInstaller/src/bin/$(buildConfiguration)/$executableName"

        $toolsDirectory = Join-Path $(Agent.ToolsDirectory) "Orch"
        & $executablePath install --toolsDirectory $toolsDirectory --config $configPath

        Write-Host "##[command]Run the installer in worker mode and output to 'Worker'"
        $config = @{
          'tools' = @(
            @{
              'tool' = 'BuildXL'
              'version' = '0.1.0-20240802.2'
              'outputVariable' = 'BXL_WORKER_LOCATION'
              'packageSelector' = '${{ parameters.pool.os }}'
              'additionalConfiguration' = 'distributedRole=Worker;invocationKey=MyBuild_${{ parameters.platform }};workerTimeoutMin=3'
            }
          )
        }

        $configPath = Join-Path $(Agent.TempDirectory) "buildToolInstallerConfig_worker.json"
        $config | ConvertTo-Json | Set-Content -Path $configPath
        Get-Content -Path $configPath

        $toolsDirectory = Join-Path $(Agent.ToolsDirectory) "Worker"
        & $executablePath install --toolsDirectory $toolsDirectory --config $configPath

  # 3. Compare the contents of the download directories - they should be identical
  - task: Powershell@2
    displayName: Validate that consistent versions of BuildXL were installed
    inputs:
      targetType: inline
      script: |
        Write-Host "##[command]Comparing the contents of the output directories for the two installations"
        # Compare the contents of the two directories
        $dir1 = Join-Path -Path $(Agent.ToolsDirectory) -ChildPath  "Orch/BuildXL"
        $dir2 = Join-Path -Path $(Agent.ToolsDirectory) -ChildPath "Worker/BuildXL"

        # List the contents of the first directory
        Get-ChildItem -Path $dir1

        # List the contents of the second directory
        Get-ChildItem -Path $dir2

        # Get the file names in each directory, sorted alphabetically
        $filesInDir1 = Get-ChildItem -Path $dir1 | Sort-Object Name | Select-Object -ExpandProperty Name
        $filesInDir2 = Get-ChildItem -Path $dir2 | Sort-Object Name | Select-Object -ExpandProperty Name

        # Compare the file lists
        $comparison = Compare-Object -ReferenceObject $filesInDir1 -DifferenceObject $filesInDir2

        if ($comparison) {
            # Output the differences
            Write-Output "The directories do not have the same contents."
            Throw "The contents in $dir1 and $dir2 are different."
        } else {
            Write-Output "The directories have the same files."
        }
