parameters:
- name: BuildSelfhost
  type: boolean
  default: true
- name: BxlCommonArgs
  type: string
  # We pass xunit semaphore `/p:[Sdk.BuildXL]xunitSemaphoreCount=8` to limit the number of parallel xunit pips.
  # Too many xunit pips running in parallel can cause the long running ones to hang. 
  default: '
    /logObservedFileAccesses 
    /logoutput:FullOutputOnError 
    /p:[Sdk.BuildXL]xunitSemaphoreCount=8 
    /forceAddExecutionPermission-
  '
- name: BxlDistributedArgs
  type: string
  default: '
    /c:/home/subst/Private/AdoDistributionTests/config.dsc
    /p:BUILDXL_FINGERPRINT_SALT=*
    /p:BUILDXL_GRAPH_FINGERPRINT_SALT=*
    /replicateOutputsToWorkers+ 
    /p:BuildXLMinimumWaitForRemoteWorkerMin=5
  '

- name: pool
  type: object
  default: 
    name: BuildXL-DevOpsAgents-Selfhost-BuildCache
    image: linux-PME-GPT
    os: linux

- name: sdkVersion
  type: string
  default: '9.x'

# Pre-build steps, including downloading BuildXL if needed
- name: preBuildSteps
  type: stepList
  default: []

stages:
# This stage must run under Ubuntu 22.04 or newer for compatibility reasons when building the eBPF Sandbox.
- stage: Bootstrap_Internal_eBPF
  displayName: Bootstrap eBPF Sandbox Internal
  dependsOn: []
  jobs:
  # Build the eBPF Sandbox binaries first for the next step to consume.
  - template: /.azdo/linux/job-ebpf.yml@self
    parameters:
      BxlCommonArgs: --shared-comp ${{ parameters.BxlCommonArgs }}
      internal: true
      outputArtifactName: 'ebpf-dev-internal'
      sdkVersion: ${{ parameters.sdkVersion }}

# This stage may run on an older version of Ubuntu such as 20.04
# It's necessary for the interpose sandbox to be built on Ubuntu 20.04 to maintain compatibility with older versions of glibc.
- stage: Bootstrap_Internal
  displayName: Bootstrap engine for validations
  dependsOn: [Bootstrap_Internal_eBPF]
  jobs:
  # Build and test selfhost with BuildXL
  - template: /.azdo/linux/job-bootstrap.yml@self
    parameters:
      # TODO: When this step moves off of Ubuntu 20.04 the /enableLinuxEBPFSandbox- flag can be removed.
      BxlCommonArgs: --shared-comp /p:BuildXLEbpfSandboxDeploymentOverridePath=$(Build.StagingDirectory)/Linux.eBPF ${{ parameters.BxlCommonArgs }} /enableLinuxEBPFSandbox-
      pool:
        name: BuildXL-DevOpsAgents-Selfhost-BuildCache
        image: linux-PME-GPT
        os: linux
      sdkVersion: ${{ parameters.sdkVersion }}
      preBuildSteps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download eBPF Sandbox binaries'
        inputs:
          artifactName: 'ebpf-dev-internal'
          targetPath: "$(Build.StagingDirectory)/Linux.eBPF"

- stage: Bootstrap_External_eBPF
  displayName: Bootstrap eBPF Sandbox External
  dependsOn: []
  jobs:
  # Build the eBPF Sandbox binaries first for the next step to consume.
  - template: /.azdo/linux/job-ebpf.yml@self
    parameters:
      BxlCommonArgs: --shared-comp ${{ parameters.BxlCommonArgs }}
      internal: false
      outputArtifactName: 'ebpf-dev-external'
      sdkVersion: ${{ parameters.sdkVersion }}


- stage: Build_External
  displayName: External validation
  dependsOn: [Bootstrap_External_eBPF]
  jobs:
    - template: /.azdo/linux/job-external.yml@self
      parameters:
        # TODO: When this step moves off of Ubuntu 20.04 the /enableLinuxEBPFSandbox- flag can be removed.
        BxlCommonArgs: --shared-comp /p:BuildXLEbpfSandboxDeploymentOverridePath=$(Build.StagingDirectory)/Linux.eBPF ${{ parameters.BxlCommonArgs }} /enableLinuxEBPFSandbox-
        pool: ${{ parameters.pool }}
        sdkVersion: ${{ parameters.sdkVersion }}
        preBuildSteps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download eBPF Sandbox binaries'
          inputs:
            artifactName: 'ebpf-dev-external'
            targetPath: "$(Build.StagingDirectory)/Linux.eBPF"

- stage: Build_Internal
  displayName: Internal validation
  dependsOn: Bootstrap_Internal
  jobs:
  - template: /.azdo/linux/job-selfhost.yml@self
    parameters:
      BxlCommonArgs: --shared-comp ${{ parameters.BxlCommonArgs }}
      pool: ${{ parameters.pool }}
      sdkVersion: ${{ parameters.sdkVersion }}
      preBuildSteps:
      - ${{ each step in parameters.preBuildSteps }}:
        - ${{ step }}

- stage: Verify_PTrace
  displayName: PTrace validation
  dependsOn: Bootstrap_Internal  
  jobs:
  - template: /.azdo/linux/job-ptrace.yml@self
    parameters:
      BxlCommonArgs: ${{ parameters.BxlCommonArgs }}
      pool: ${{ parameters.pool }}
      sdkVersion: ${{ parameters.sdkVersion }}

- stage: Build_Distributed
  displayName: Distributed test
  dependsOn: [Build_Internal, Verify_PTrace] 
  jobs:
  - template: /.azdo/linux/job-distributed-1espt.yml@self
    parameters:
      BxlDistributedArgs: ${{ parameters.BxlDistributedArgs }}
      pool:
        # This stage expects a pool with a build cache configured, so harcoding that one
        ${{ each kvp in parameters.pool }}:
          ${{ if not(in(kvp.key, 'name')) }}:
            ${{ kvp.key }}: ${{ kvp.value }}
        name: BuildXL-DevOpsAgents-Selfhost-BuildCache
      preBuildSteps:
      - ${{ each step in parameters.preBuildSteps }}:
        - ${{ step }}