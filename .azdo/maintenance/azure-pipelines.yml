trigger: none

pool:
  name: BuildXL-DevOpsAgents-Selfhost-BuildCache
  os: windows
  demands: ImageOverride -equals 1ESPT-Win2022-PME-3

resources:
  repositories:
    - repository: DominoReleaseManagement
      type: git
      name: Domino.ReleaseManagement
    - repository: CloudBuild
      type: git
      name: CloudBuild

variables:
  # We have a separate pipeline that runs clean builds to get full CodeQL coverage.
  - name: Codeql.Enabled
    value: "false"
  # CodeQL scans for Cloudbuild repo should be performed elsewhere.
  # CB repo is checked out into $(Build.SourcesDirectory)/CloudBuild. CodeQL is using $(Build.SourcesDirectory) as a source root.
  # Add the top-level directory to the exclude list to exclude the whole CloudBuild repo.
  - name: Codeql.ExcludePathPatterns
    value: "CloudBuild"

stages:
- stage:
  jobs:
    - job: UpdateSBOMPackages
      displayName: "Update SBOM Packages"
      steps:
      - checkout: self
        persistCredentials: true
      - checkout: DominoReleaseManagement
      - checkout: CloudBuild
      - template: /.azdo/common/use-latest-dotnet-sdk.yml

      # Nuget authenticate is required for package restore to work even though the feed is under the same organization as the pipeline
      - task: NuGetAuthenticate@1
      - task: DotNetCoreCLI@2
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '$(Build.SourcesDirectory)/Domino.ReleaseManagement/src/BuildXLReleaseManagement/BuildXLReleaseManagement/BuildXLReleaseManagement.csproj'
          arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: false
      - template: /.azdo/common/journaling.yml # Enable journaling

      # Generate access tokens
      # Token for the Cloudbuild API
      - template: /.azdo/common/generate-access-token.yml
        parameters:
          ServiceConnection: 'mseng-Domino-BuildXL-Pipelines'
          Resource: 'https://cloudbuild.microsoft.com/'
          AccessTokenVariable: CloudBuildAccessToken

      # NOTE: BuildXL-Pipeline-AccessToken is generated by this template
      - template: /.azdo/common/set-variable-pats.yml
        parameters:
          workingDirectory: $(Build.SourcesDirectory)/BuildXL.Internal
          buildXLSourceDirectory: $(Build.SourcesDirectory)/BuildXL.Internal

      - script: .\BuildXLReleaseManagement.exe updatePackages --Packages Microsoft.SBOMCore@latest@1essharedassets@SBOMTool@$(BuildXL-Pipeline-AccessToken) Microsoft.Parsers.ManifestGenerator@latest@1essharedassets@SBOMTool@$(BuildXL-Pipeline-AccessToken) Microsoft.Sbom.Common@latest@nuget.org Microsoft.Sbom.Parsers.Spdx22SbomParser@latest@nuget.org Microsoft.SBOM.Adapters@latest@nuget.org Microsoft.ManifestInterface@latest@1essharedassets@SBOMTool@$(BuildXL-Pipeline-AccessToken) Microsoft.Sbom.Contracts@latest@nuget.org Microsoft.ComponentDetection.Contracts@latest@nuget.org python@latest@nuget.org Microsoft.VisualStudio.Services.Governance.ComponentDetection@latest@mseng@ComponentGovernance@$(BuildXL-Pipeline-AccessToken) Microsoft.Sbom.Extensions@latest@nuget.org --MsEngGitToken $(BuildXL-Pipeline-AccessToken) --cloudBuildAuthenticationToken $(CloudBuildAccessToken) --BuildXLSourceRoot "$(Build.SourcesDirectory)/BuildXL.Internal" --CloudbuildSourceRoot "$(Build.SourcesDirectory)/CloudBuild"
        workingDirectory: '$(Build.ArtifactStagingDirectory)/BuildXLReleaseManagement'
        env:
          1ESSHAREDASSETS_BUILDXL_FEED_PAT: $(1ESSHAREDASSETS_BUILDXL_FEED_PAT)
          CLOUDBUILD_BUILDXL_SELFHOST_FEED_PAT: $(CLOUDBUILD_BUILDXL_SELFHOST_FEED_PAT)
          MSENG_GIT_PAT: $(MSENG_GIT_PAT)
          VSTSPERSONALACCESSTOKEN: $(VSTSPERSONALACCESSTOKEN)
          ARTIFACT_CREDENTIALPROVIDERS_PATH: $(ARTIFACT_CREDENTIALPROVIDERS_PATH)
          CLOUDBUILD_BUILDXL_SELFHOST_FEED_PAT_B64: $(CLOUDBUILD_BUILDXL_SELFHOST_FEED_PAT_B64)
          VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: $(VSS_NUGET_EXTERNAL_FEED_ENDPOINTS)

      # Copy and publish BuildXL log in case it failed during the schedule phase
      - task: CopyFiles@2
        continueOnError: true
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/BuildXL.Internal/Out/Logs'
          Contents: '**/BuildXL.log'
          TargetFolder: '$(Build.ArtifactStagingDirectory)/BuildXLLogs'
      - task: PublishPipelineArtifact@1
        continueOnError: true
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)/BuildXLLogs'
          artifact: '$(Build.BuildId).Logs'
          publishLocation: 'pipeline'

    - job: UpdateNoticeFile
      displayName: "Update NOTICE.txt in BuildXL.Internal"
      steps:
      - checkout: self
        fetchDepth: 1
        persistCredentials: true
      
      # Run component detection to generate NOTICE file in the root of the repo.
      # The generated file will be included in the nuget packages we create and publish in this job 
      # If any of these tasks fail we fall back the the NOTICE.txt already checked in the repository.
      - task: ComponentGovernanceComponentDetection@0
        displayName: Component Detection

      - task: notice@0
        displayName: Generate NOTICE file
        inputs:
          outputfile: $(Build.SourcesDirectory)\BuildXL.Internal\NOTICE.txt
          outputformat: text

      - checkout: DominoReleaseManagement
      - template: /.azdo/common/use-latest-dotnet-sdk.yml

      # Nuget authenticate is required for package restore to work even though the feed is under the same organization as the pipeline
      - task: NuGetAuthenticate@1
      - task: DotNetCoreCLI@2
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '$(Build.SourcesDirectory)/Domino.ReleaseManagement/src/BuildXLReleaseManagement/BuildXLReleaseManagement/BuildXLReleaseManagement.csproj'
          arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: false

      # Generate Access Token
      - template: /.azdo/common/generate-access-token.yml
        parameters:
          AccessTokenVariable: BuildXL-Pipeline-AccessToken

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: .\BuildXLReleaseManagement.exe updateNoticeFile --MsEngGitToken $(BuildXL-Pipeline-AccessToken) --BuildXLSourceRoot "$(Build.SourcesDirectory)/BuildXL.Internal"
          showWarnings: true
          pwsh: false
          workingDirectory: '$(Build.ArtifactStagingDirectory)/BuildXLReleaseManagement'