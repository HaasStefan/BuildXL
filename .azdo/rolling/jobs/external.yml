parameters: 
- name: QualifiersToBuild
  type: object
  default:
    - Debug
    - Release

jobs:
- job: External_Lkg
  displayName: 'External Build: Create external nuget packages'
  timeoutInMinutes: 180
  cancelTimeoutInMinutes: 1
  condition: and(succeeded(), ne(variables['ServicingOnlyBuild'], 'true'))
  pool:
    name: BuildXL-DevOpsAgents-Selfhost-BuildCache
    os: windows

  templateContext:
    sdl:
      baseline:
        baselineFile: $(Build.SourcesDirectory)\.config\guardian\.gdnbaselines
      binskim:
        enabled: true
        scanOutputDirectoryOnly: true
        break: true
        severity: warning
      spotBugs:
        enabled: false

    outputParentDirectory: $(Build.SourcesDirectory)\Out\Bin\release\public
    outputs:
    - output: pipelineArtifact
      displayName: '[OnFailure] Upload logs'
      condition: failed()
      continueOnError: True
      artifact: buildxl.rolling.external.logs.$(Build.BuildNumber)
      targetPath: $(Build.SourcesDirectory)\Out\Logs
      sbomEnabled: false    # SBOM is not needed for logs
  
    - output: pipelineArtifact
      displayName: Upload external packages
      continueOnError: True
      artifact: buildxl-external.pkgs.$(Build.BuildNumber)
      targetPath: $(Build.SourcesDirectory)\Out\Bin\release\public\pkgs

    - output: pipelineArtifact
      displayName: Upload VS Code extension
      continueOnError: True
      artifact: buildxl-external.vscode.$(Build.BuildNumber)
      targetPath: $(Build.SourcesDirectory)\Out\Bin\release\ide

  steps:
  - checkout: self
    fetchDepth: 1
    fetchTags: false
  
  # Run component detection to generate NOTICE file in the root of the repo.
  # The generated file will be included in the nuget packages we create and publish in this job 
  # If any of these tasks fail we fall back the the NOTICE.txt already checked in the repository.
  - task: ComponentGovernanceComponentDetection@0
    displayName: Component Detection

  - task: notice@0
    displayName: Generate NOTICE file
    continueOnError: true
    inputs:
      outputfile: $(Build.SourcesDirectory)\NOTICE.txt
      outputformat: text

  - template: ../steps/external_prepare.yml

  - template: ../../packages/generate-output-package-filter.yml
    parameters:
      internal: false
      packageList: 'packages'

  - task: CmdLine@1
    displayName: Build external packages and VSCode extension
    inputs:
      filename: bxl.cmd
      arguments: >-
        /f:$(PackagesFilter)oroutput='Out\Bin\release\ide\*'
        /q:Release /q:ReleaseLinux
        /p:[BuildXL.Branding]SemanticVersion=$(BuildXL.SemanticVersion)
        /p:[BuildXL.Branding]PrereleaseTag=$(BuildXL.PreReleaseTag)
        /p:[BuildXL.Branding]SourceIdentification=$(Branding_SourceIdentification)
        /logOutput:FullOutputOnWarningOrError
        /p:[Sdk.BuildXL]microsoftInternal=0
  - template: /.azdo/common/extract-nupkg-packages.yml
    parameters:
      SourceDirectory: $(Build.SourcesDirectory)\Out\Bin\release\public\pkgs
      DestinationDirectory: $(Build.SourcesDirectory)\Out\Bin\release\public\ExtractedPackagesForBinSkimScan
      BuildNumber: $(Build.BuildNumber)
    
- job: External_Build
  displayName: 'Build and test qualifier:'
  timeoutInMinutes: 180
  condition: and(succeeded(), ne(variables['ServicingOnlyBuild'], 'true'))
  pool:
    name: BuildXL-DevOpsAgents-Selfhost-BuildCache
    os: windows

  strategy:
    matrix:
      ${{ each qualifier in parameters.QualifiersToBuild }}:
        ${{ qualifier }}:
          QualifierToBuild: ${{ qualifier }}

  templateContext:
    outputs:
    - output: pipelineArtifact
      displayName: '[OnFailure] Upload LKG logs'
      condition: failed()
      artifact: buildxl.rolling.external-lkg.$(QualifierToBuild).logs.$(Build.BuildNumber)
      targetPath: $(Build.SourcesDirectory)\Out\Logs
      sbomEnabled: false    # SBOM is not needed for logs

  steps:
  - checkout: self
    fetchDepth: 1
    fetchTags: false

  - template: ../steps/external_prepare.yml

  - task: CmdLine@1
    displayName: bxl.cmd -deploy dev
    inputs:
      filename: bxl.cmd
      arguments: >- 
        -deploy dev
        -minimal
        -deployconfig $(QualifierToBuild)
        /p:[BuildXL.Branding]SemanticVersion=$(BuildXL.SemanticVersion)
        /p:[BuildXL.Branding]PrereleaseTag=$(BuildXL.PreReleaseTag)
        /p:[BuildXL.Branding]SourceIdentification=$(Branding_SourceIdentification)
        /logOutput:FullOutputOnWarningOrError
        /p:[Sdk.BuildXL]microsoftInternal=0
        /processRetries:3
        /scrubDirectory:$(Build.SourcesDirectory)\Out\Objects
  
  - task: CmdLine@1
    displayName: bxl.cmd -use dev
    inputs:
      filename: bxl.cmd
      arguments: >-
        -use dev
        /p:[Sdk.BuildXL]microsoftInternal=0
        /q:$(QualifierToBuild)
        /p:[BuildXL.Branding]SemanticVersion=$(BuildXL.SemanticVersion)
        /p:[BuildXL.Branding]PrereleaseTag=$(BuildXL.PreReleaseTag)
        /p:[BuildXL.Branding]SourceIdentification=$(Branding_SourceIdentification)
        /logOutput:FullOutputOnWarningOrError
        /p:RetryXunitTests=1
        /processRetries:3
        /p:xunitSemaphoreCount=16
        /scrubDirectory:$(Build.SourcesDirectory)\Out\Objects

- job: Linux_External
  displayName: Linux External Build
  timeoutInMinutes: 180
  condition: and(succeeded(), ne(variables['ServicingOnlyBuild'], 'true'))
  pool:
    name: BuildXL-DevOpsAgents-Selfhost-BuildCache
    image: linux-PME-GPT
    os: linux
  
  templateContext:
    outputs:
    - output: artifactsDrop
      displayName: Publish Packages to Intermediate Drop
      dropServiceURI: https://mseng.artifacts.visualstudio.com/DefaultCollection
      buildNumber: BuildXL/Linux/External/Intermediate/$(Build.BuildNumber)/$(Build.BuildId)
      sourcePath: $(Build.SourcesDirectory)/Out/Bin/release/public/pkgs
      retentionDays: 5
      dropMetadataContainerName: DropMetadata-Linux-Intermediate-External

    - output: pipelineArtifact
      displayName: Upload Linux VS Code extension
      continueOnError: True
      artifact: buildxl-external.vscode.linux-x64.$(Build.BuildNumber)
      targetPath: $(Build.SourcesDirectory)/Out/Bin/release/ide

    - output: buildArtifacts 
      displayName: Publish build logs
      condition: always()
      PathtoPublish: $(Build.SourcesDirectory)/Out/Logs/Build
      ArtifactName: linuxbuildlogs-external
      sbomEnabled: false    # SBOM is not needed for logs
    
  steps:
  - checkout: self
    fetchDepth: 1
    fetchTags: false

  - template: ../steps/linux_prepare.yml
    parameters:
      CacheNamespace: BuildXL.Linux.External  # TODO - this is the extent of isolation with the internal build we're getting right now / work item #2143786

  - task: Bash@3
    displayName: Build LKG
    inputs:
      targetType: inline
      script: >-
        set -eu

        bash bxl.sh --shared-comp --minimal --deploy-dev --release
        /cacheMiss:Bxl.Selfhost.Linux.External
        /logoutput:FullOutputOnError
        /logsDirectory:"Out/Logs/Build"
      workingDirectory: /home/subst
  
  - task: Bash@3
    displayName: Build Packages with LKG
    inputs:
      targetType: inline
      script: >-
        set -eu

        bash bxl.sh --use-dev --shared-comp
        /cacheMiss:Bxl.Linux.External.Rolling
        /logoutput:FullOutputOnError
        /logsDirectory:"Out/Logs/Build"
        /p:Build.BuildId=$(Build.BuildNumber)
        /p:[BuildXL.Branding]SourceIdentification=$(Branding_SourceIdentification)
        /q:ReleaseLinux
        "/f:output='/home/subst/Out/Bin/release/public/pkgs/*'oroutput='/home/subst/Out/Bin/release/ide/*'"
      workingDirectory: /home/subst