parameters:
- name: isRollingBuild
  type: boolean
  default: true

jobs:
- job: PublishBinaries
  displayName: 'AzDev Hosted: Publish build binaries'
  timeoutInMinutes: 240
  dependsOn:
  pool:
    name: BuildXL-DevOpsAgents-Selfhost-BuildCache
    os: windows
    demands: ImageOverride -equals 1ESPT-Win2022-PME-3
  templateContext:
    sdl:
      binskim:
        enabled: true
        scanOutputDirectoryOnly: true
        break: true
        severity: warning
    outputParentDirectory: $(Agent.TempDirectory)/DownloadedDrop
    outputs:
    - output: artifactsDrop
      displayName: 'ðŸ“¤ Publish BuildXL to mseng Artifact Services Drop (mseng.visualstudio.com)'
      dropServiceURI: https://mseng.artifacts.visualstudio.com/DefaultCollection
      buildNumber: buildxl.dogfood.$(Build.BuildNumber)
      sourcePath: $(Agent.TempDirectory)/DownloadedDrop
      detailedLog: true
      retentionDays: 180
      dropMetadataContainerName: DropMetadata-mseng
      sbomEnabled: false

    - output: artifactsDrop
      displayName: 'ðŸ“¤ Publish BuildXL to CB Artifact Services Drop (cloudbuild.visualstudio.com)'
      dropServiceURI: https://cloudbuild.artifacts.visualstudio.com/DefaultCollection
      buildNumber: buildxl.dogfood.$(Build.BuildNumber)
      sourcePath: $(Agent.TempDirectory)/DownloadedDrop
      detailedLog: true
      usePat: false
      retentionDays: 180
      dropMetadataContainerName: DropMetadata-cloudbuild
      sbomEnabled: false

    - output: nuget
      displayName: 'ðŸ“¦ Push private NuGet packages to 1essharedassets/BuildXL.Internal feed'
      packageParentPath: $(Agent.TempDirectory)/DownloadedDrop/release/private/pkgs 
      packagesToPush: $(Agent.TempDirectory)/DownloadedDrop/release/private/pkgs/*.nupkg
      nuGetFeedType: external
      publishFeedCredentials: 'mseng-Domino-BuildXL-1ESSharedAssets_BuildXL.Internal'
      sbomEnabled: false
  
    - output: nuget
      displayName: 'ðŸ“¦ Push public NuGet packages to 1essharedassets/BuildXL feed'
      condition: and(succeeded(), ne(variables['ServicingOnlyBuild'], 'true'))
      packageParentPath: $(Agent.TempDirectory)/DownloadedDrop/release/pkgs 
      packagesToPush: $(Agent.TempDirectory)/DownloadedDrop/release/pkgs/*.nupkg
      nuGetFeedType: external
      publishFeedCredentials: 'mseng-Domino-BuildXL-1ESSharedAssets_BuildXL'
      sbomEnabled: false

  steps:
  - checkout: self  # We need this to call the SBOM validation script
    fetchDepth: 1
    fetchTags: false

  # Set access token to pull/push artifacts from CB and mseng.
  - template: /.azdo/common/generate-access-token.yml
    parameters:
      AccessTokenVariable: BuildXL-Pipeline-AccessToken

  - template: /.azdo/common/set-artifacts-pat.yml
    parameters:
      AzDevPAT: $(BuildXL-Pipeline-AccessToken)

  - task: ms-vscs-artifact.build-tasks.artifactDropDownloadTask-1.artifactDropDownloadTask@0
    displayName: 'ðŸ“¥ Download candidate BuildXL'
    inputs:
      dropMetadataContainerName: SecondBuildFull
      dropServiceURI: ''
      destinationPath: $(Agent.TempDirectory)/DownloadedDrop
      usePat: false

  - task: AzureArtifacts.drop-validator-task.drop-validator-task.DropValidatorTask@0
    displayName: Drop Validator (Build Manifest Validation)
    inputs:
      BuildDropPath: $(Agent.TempDirectory)/DownloadedDrop
      OutputPath: $(Agent.TempDirectory)/Output
      ValidateSignature: true
      Verbosity: Verbose

  - task: PowerShell@2
    displayName: Print Drop Validator Result
    inputs:
      targetType: inline
      script: get-content $(Agent.TempDirectory)/Output
      errorActionPreference: continue
  
  - task: PowerShell@2
    displayName: SBOM Validation
    inputs:
      filePath: Shared/Scripts/SBOMValidation.ps1
      arguments: -SBOMManifestFile  $(Agent.TempDirectory)/DownloadedDrop/_manifest/spdx_2.2/manifest.spdx.json -BcdeOutputFile  $(Agent.TempDirectory)/DownloadedDrop/_manifest/bcde-output.json

  - ${{ if eq(parameters.isRollingBuild, true) }}:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: Write-Host "##vso[build.addbuildtag]RollingRelease"
      displayName: Tag build for consumption in release pipeline

  # Add MacOS and Linux artifacts to the DownloadedDrop directory, so they will be included in the
  # final drop produced by this pipeline. This way the release pipeline has everything it needs in
  # a single drop.
  #
  # TODO: In the following drop download task, 'usePat' is set to false.
  #       May be this can be removed (or set to true) because the system access token should be sufficient.
  #       Note that, when set to 'false', the task will use the environment variable 'ArtifactServices.Drop.PAT' set by set-artifacts-pat.yml,
  #       otherwise, it will use the system access token. Because the following drop download tasks are downloading from the same organization,
  #       the system access token should be (in theory) sufficient.
  - ${{ if eq(parameters.isRollingBuild, true) }}:
    - task: ms-vscs-artifact.build-tasks.artifactDropDownloadTask-1.artifactDropDownloadTask@0
      displayName: 'ðŸ“¥ Download MacOS Runtime NuGet Package'
      inputs:
        dropMetadataContainerName: DropMetadata-MacOS-Intermediate
        dropServiceURI: ''
        destinationPath: $(Agent.TempDirectory)/DownloadedDrop
        usePat: false # TODO: May be this can be removed (or set to true) because system access token is sufficient.

  - task: ms-vscs-artifact.build-tasks.artifactDropDownloadTask-1.artifactDropDownloadTask@1
    displayName: 'ðŸ“¥ Download Internal Linux Intermediate Artifacts'
    inputs:
      dropMetadataContainerName: DropMetadata-Linux-Intermediate-Internal
      dropServiceURI: ''
      destinationPath: $(Agent.TempDirectory)/DownloadedDrop
      usePat: false

  # Deletes outputs not needed in order to reduce the files sent to SDL binary scanning
  # This filtering needs to be done after the drop validator task otherwise that would fail
  - task: PowerShell@2
    displayName: 'Delete extra outputs'
    inputs:
      targetType: 'inline'
      script: |
        Remove-Item -Path "$(Agent.TempDirectory)/DownloadedDrop/debug" -Recurse -Force
      errorActionPreference: 'continue'

  # Set NuGet endpoints for the feeds we are going to push to. The NuGet push tasks are injected by 1ESPT using the 'output: nuget' context.
  - template: /.azdo/common/set-nuget-endpoint.yml
    parameters:
      NuGetServiceConnectionId: 'bf3972a0-77c4-4dd8-8f89-cf4399bc0658'
      NuGetServiceConnectionName: 'mseng-Domino-BuildXL-1ESSharedAssets_BuildXL.Internal'
      AccessToken: $(BuildXL-Pipeline-AccessToken)

  - template: /.azdo/common/set-nuget-endpoint.yml
    parameters:
      NuGetServiceConnectionId: 'af9cb8db-5f2f-4b3e-b436-e1ff62614888'
      NuGetServiceConnectionName: 'mseng-Domino-BuildXL-1ESSharedAssets_BuildXL'
      AccessToken: $(BuildXL-Pipeline-AccessToken)

- ${{ if eq(parameters.isRollingBuild, true) }}:
  - job: GitHubForcePush
    displayName: Force Push BuildXL.Internal to GitHub Main
    timeoutInMinutes: 180
    # Only force push the main branch
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    pool:
      name: BuildXL-DevOpsAgents-Selfhost-BuildCache
      os: windows
      demands: ImageOverride -equals 1ESPT-Win2022-PME-3
    steps:
    - checkout: self
      fetchTags: true

    - task: PowerShell@2
      displayName: Force push to GitHub master SSH
      inputs:
        filePath: Shared/Scripts/github/PushToGHWithDeployKey.ps1
        arguments: '"$(Github-DeployKey-PrivateKey)" "$(Github-DeployKey-PublicKey)" "$(Build.SourcesDirectory)\Shared\Scripts\github\known_hosts"'
