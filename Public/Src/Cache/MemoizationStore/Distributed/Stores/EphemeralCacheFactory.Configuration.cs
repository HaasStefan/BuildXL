// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

using System;
using System.Threading;
using AbsolutePath = BuildXL.Cache.ContentStore.Interfaces.FileSystem.AbsolutePath;

#nullable enable

namespace BuildXL.Cache.ContentStore.Distributed.Ephemeral;

public static partial class EphemeralCacheFactory
{
    /// <nodoc />
    public abstract record Configuration
    {
        /// <summary>
        /// Location on drive where cache is located.
        /// </summary>
        /// <remarks>
        /// Cache will take over this drive, and it's not share-able with other caches.
        /// </remarks>
        public required AbsolutePath RootPath { get; init; }

        /// <summary>
        /// Hostname and port that allows other machines to communicate with this machine
        /// </summary>
        /// <remarks>
        /// The suggested port to set this to is GrpcConstants.DefaultEphemeralGrpcPort. When using
        /// encrypted communication, the suggested port is GrpcConstants.DefaultEphemeralEncryptedGrpcPort.
        /// </remarks>
        public required MachineLocation Location { get; init; }

        /// <summary>
        /// Hostname and port of the leader machine
        /// </summary>
        /// <remarks>
        /// The suggested port to set this to is GrpcConstants.DefaultEphemeralLeaderGrpcPort. When using
        /// encrypted communication, the suggested port is GrpcConstants.DefaultEphemeralLeaderEncryptedGrpcPort.
        /// </remarks>
        public required MachineLocation Leader { get; init; }

        /// <summary>
        /// Maximum size of the cache.
        /// </summary>
        public required uint MaxCacheSizeMb { get; init; }

        /// <summary>
        /// Heartbeat interval.
        /// </summary>
        /// <remarks>
        /// This parameter controls how often we send a heartbeat to the cluster. The heartbeat is used to detect when
        /// a machine is offline.
        /// </remarks>
        public TimeSpan HeartbeatInterval { get; init; } = TimeSpan.FromMinutes(5);

        /// <summary>
        /// Maximum time to wait to establish or finalize a P2P gRPC connection
        /// </summary>
        public TimeSpan ConnectionTimeout { get; init; } = TimeSpan.FromMilliseconds(20);

        /// <summary>
        /// Maximum time to wait for the result of a GetLocations gRPC request
        /// </summary>
        public TimeSpan GetLocationsTimeout { get; init; } = TimeSpan.FromMilliseconds(100);

        /// <summary>
        /// Maximum time to wait for the result of a UpdateLocations gRPC request
        /// </summary>
        public TimeSpan UpdateLocationsTimeout { get; init; } = TimeSpan.FromMilliseconds(100);

        /// <summary>
        /// The maximum staleness we're willing to tolerate to elide a remote locations query when acting as a worker.
        /// </summary>
        public TimeSpan MaximumWorkerStaleness { get; init; } = TimeSpan.FromSeconds(30);

        /// <summary>
        /// The maximum staleness we're willing to tolerate to elide a remote locations query when acting as a leader.
        /// </summary>
        public TimeSpan MaximumLeaderStaleness { get; init; } = TimeSpan.FromSeconds(30);

        /// <summary>
        /// Inline change processing.
        /// 
        /// WARNING: TESTING ONLY.
        /// </summary>
        internal bool TestInlineChangeProcessing { get; set; } = false;

        /// <summary>
        /// Indicates whether to delete local file system content store on shutdown
        /// </summary>
        public bool DeleteLocalOnShutdown { get; set; } = false;
    }

    /// <summary>
    /// This configuration allows us to create a cache that is shared by all builds in the datacenter. This means that
    /// content generated by any of the concurrently running builds will be available to all other concurrently running
    /// builds.
    /// </summary>
    public sealed record DatacenterWideCacheConfiguration : Configuration
    {
        /// <summary>
        /// The default universe
        /// </summary>
        public static readonly string DefaultUniverse = "default";

        /// <summary>
        /// The universe allows caches with shared resources to split up into different logical caches.
        /// </summary>
        public required string Universe { get; init; } = DefaultUniverse;

        /// <summary>
        /// Maximum timeout for storage operations
        /// </summary>
        public TimeSpan StorageInteractionTimeout { get; set; }
    };

    /// <summary>
    /// This configuration allows us to create a cache that is shared only by the builders collaborating on a single
    /// build.
    /// </summary>
    public sealed record BuildWideCacheConfiguration : Configuration
    {
        /// <summary>
        /// Maximum time to wait to establish or finalize a gRPC connection to the leader for the purposes of tracking
        /// the cluster's state.
        /// </summary>
        /// <remarks>
        /// This defaults to infinite because it is assumed that a worker can start up an arbitrary amount of time
        /// before the leader does. This is because the processes are started up independently, so we let the build
        /// engine handle the synchronization here.
        /// </remarks>
        public TimeSpan ClusterStateConnectionTimeout { get; init; } = Timeout.InfiniteTimeSpan;
    };
}
