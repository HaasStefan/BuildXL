syntax = "proto3";

import "google/protobuf/wrappers.proto";

package BuildXL.Distribution.Grpc;

// Defines the service for talking to the builder orchestrator process
service Orchestrator {    
    // A worker can advertise its own location dynamically during the build
    // This returns true if the orchestrator accepts this worker
    rpc Hello(ServiceLocation) returns (HelloResponse) {}

    // Signals the completion of the Attach call
    rpc AttachCompleted(AttachCompletionInfo) returns (RpcResponse) {}

    // Report the completion of the given pips
    rpc ReportPipResults(PipResultsInfo) returns (RpcResponse) {}

    // Report the completion of the given pips via stream
    rpc StreamPipResults(stream PipResultsInfo) returns (RpcResponse) {}

    // Report the execution log data
    rpc ReportExecutionLog(ExecutionLogInfo) returns (RpcResponse) {}

    // Report the execution log data via stream
    rpc StreamExecutionLog(stream ExecutionLogInfo) returns (RpcResponse) {}

    // Heartbeat
    rpc Heartbeat(RpcResponse) returns (RpcResponse) {}
}

// Defines the service for talking to builder worker processes
service Worker
{
    // Initiates a build on the worker
    rpc Attach(BuildStartData) returns (RpcResponse) {}

    // Triggers a build of the given pips on the worker
    rpc ExecutePips(PipBuildRequest) returns (RpcResponse) {}

    // Triggers a build of the given pips on the worker via stream
    rpc StreamExecutePips(stream PipBuildRequest) returns (RpcResponse) {}

    // Signals that build is finished and that worker should exit
    rpc Exit(BuildEndData) returns (WorkerExitResponse) {}

    // Heartbeat
    rpc Heartbeat(RpcResponse) returns (RpcResponse) {}
}

// Empty response for a rpc method
message RpcResponse {}

// True or false response for a rpc method
message HelloResponse
{
    enum HelloResponseType {
        Ok = 0;
        Released = 1;
        NoSlots = 2;
    }

    // Result
    HelloResponseType Message = 1;
}

// Workers return eventstats collected by EventStatsExecutionLogTarget when exit
message WorkerExitResponse
{
    repeated int64 EventCounts = 1;
}

// The response from an Attach event
message AttachCompletionInfo
{
    // Identifies the worker which makes the callback
    uint32 WorkerId = 1;

    // The maximum number of simultaneous pip executions for the worker
    int32 MaxProcesses = 2;

    // The maximum number of simultaneous materializations for the worker
    int32 MaxMaterialize = 3;

    // The maximum number of simultaneous cachelookups for the worker
    int32 MaxCacheLookup = 4;

    // The maximum number of simultaneous light process executions for the worker
    int32 MaxLightProcesses = 5;

    // The available RAM on the worker
    int32 AvailableRamMb = 6;

    // The total RAM on the worker
    int32 TotalRamMb = 7;
}

// Defines information about a completed pip and its outputs
message PipCompletionData
{
    // The pip id value
    uint32 PipIdValue = 1;

    // Blob of data representing result for IPC or process pip
    bytes ResultBlob = 2;

    // The elapsed time in ticks of ExecuteProcess or ExecuteIpc step
    int64 ExecuteStepTicks = 3;

    // The elapsed time in ticks of queued duration
    int64 QueueTicks = 4;

    // The execution step requested
    int32 Step = 5;

    // Thread id
    int32 ThreadId = 6;

    // Start of the duration
    int64 StartTimeTicks = 7;

    // DateTime before we send the results back to orchestrator
    int64 BeforeSendTicks = 8;

    // The elapsed time in ticks of ExecutionResult (de)serialization duration
    int64 SerializationTicks = 9;
}

// Events that have been logged on workers and are transited to the orchestrator. Any changes here may require changes
// to TrackingEventListener.cs
message EventMessage
{
    /// Unique identifier for the event to ensure the same event is not logged more than once. Note that this does not
    /// correlate to the DX code of the event. That is the EventId field
    int32 Id = 1;

    // The event level
    int32 Level = 2;

    // The EventId of the originally logged event
    int32 EventId = 3;

    // The EventName of the originally logged event
    string EventName = 4;

    // The keywords of the original event
    int64 EventKeywords = 5;

    // The message for the event
    string Text = 6;

    oneof PipProcessErrorOrWarningEvent {
       // The original pipProcessError/pipProcessWarning event if exist
       PipProcessEvent PipProcessEvent = 7;
    }
}

// Information about completed pips and events logged on worker
message PipResultsInfo
{
    // Identifies the worker which executed the pips
    uint32 WorkerId = 1;

    // The completed pips
    repeated PipCompletionData CompletedPips = 2;

    // The events forwarded to the orchestrator
    repeated EventMessage ForwardedEvents = 3;

    // The build manifest execution log events forwarded to the orchestrator 
    ExecutionLogData BuildManifestEvents = 4;
}

// Information about execution log data forwarded to the orchestrator
message ExecutionLogInfo
{
    // Identifies the worker which generates the execution log
    uint32 WorkerId = 1;

    // The execution log events forwarded to the orchestrator 
    ExecutionLogData Events = 2;
}

// Execution log data forwarded to the orchestrator
message ExecutionLogData 
{
    // Data logged to the execution log on the worker
    bytes DataBlob = 1;

    // Sequence number of the execution log blob on the worker
    int32 SequenceNumber = 2;
}

// Defines initialization information needed by workers to participate in a build
message BuildStartData 
{
    // Scheduler State and associated data structures
    PipGraphCacheDescriptor CachedGraphDescriptor = 1;

    // Identifies the worker in the build
    uint32 WorkerId = 2;

    // Salt added to fingerprints to make them unique
    string FingerprintSalt = 3;

    // The session identifier
    string SessionId = 4;

    // Service locations of orchestrator
    ServiceLocation OrchestratorLocation = 5;

    // Environment variables
    map<string, string> EnvironmentVariables = 6;
    
    // Content hash of optional symlink file.
    bytes SymlinkFileContentHash = 7;

    // PipSpecificPropertiesAndValues data
    repeated PipSpecificPropertyAndValue PipSpecificPropertiesAndValues = 8;
}

// Represents the corresponding property and its value for a given pipsemistablehash.
message PipSpecificPropertyAndValue
{
    int32 PipSpecificProperty = 1;

    int64 PipSemiStableHash = 2;

    string PropertyValue = 3;
}

// Defines location at which a service can be connected to.
message ServiceLocation
{
    string IpAddress = 1;
    int32 Port = 2;
}

// A request to build pips on a worker
message PipBuildRequest
{
    // The pips to execute
    repeated SinglePipBuildRequest Pips = 1;

    // The input files and hashes for the pip
    repeated FileArtifactKeyedHash Hashes = 2;
}

message SinglePipBuildRequest
{
    // The pip id value
    uint32 PipIdValue = 1;

    // The fingerprint for the cache descriptor
    bytes Fingerprint = 2;

    // The pip priority
    int32 Priority = 3;

    // The activity id assigned to the pip execution
    string ActivityId = 4;

    // The execution step requested
    int32 Step = 5;

    // The expected peak working set of the pip
    int32 ExpectedPeakWorkingSetMb = 6;
    
    // The expected average working set of the pip
    int32 ExpectedAverageWorkingSetMb = 7;

    // Sequence number for deduplicating worker calls
    int32 SequenceNumber = 8;
}

message FileArtifactKeyedHash
{
    /// The integral absolute path id for the file
    int32 PathValue = 1;

    // The integral rewrite count for the file
    int32 RewriteCount = 2;

    // The content hash of the file
    bytes ContentHash = 3;

    // String representation of path, that is only available for dynamic file.
    string PathString = 4;

    // Specified file name with appropriate casing
    string FileName = 5;

    // The length of the file
    int64 Length = 6;

    enum GrpcReparsePointType {
        None = 0;
        FileSymlink = 1;
        DirectorySymlink = 2;
        UnixSymlink = 3;
        Junction = 4;
        NonActionable = 5;
    }

    // The reparse point type
    GrpcReparsePointType ReparsePointType = 7;
    
    // The reparse point target if the type is actionable
    string ReparsePointTarget = 8;

    // The directory artifacts which contain the file
    repeated GrpcDirectoryArtifact AssociatedDirectories = 9;

    // Whether the File is affected by the source code changes
    bool IsSourceAffected = 10;

    /// Indicates whether the file represents an allowed rewrite on a source or alien file
    bool IsAllowedFileRewrite = 11;

    /// Whether the file has execution permission for the owner. Only valid in linux/mac OSs
    bool IsExecutable = 12;
}

message GrpcDirectoryArtifact
{
    // The integral absolute path id for the directory of the file; the id is only valid for file in dynamic directory.
    int32 DirectoryPathValue = 1;

    // The seal id of the directory of the file when applicable.
    uint32 DirectorySealId = 2;

    // Whether the directory of the file is a shared opaque directory (when applicable)
    bool IsDirectorySharedOpaque = 3;
}

// Defines finalization information passed to workers at the end of the build
message BuildEndData
{
    // Indicates if worker should report build fail the build and that the worker due to the given failure
    string Failure = 1;
}

/// <summary>
/// Descriptor for a cached graph.
/// </summary>
message PipGraphCacheDescriptor {
    uint64 Id = 1;

    /// <summary>
    /// TraceInfo specified for the BuildXL session.
    /// This is being added on the BuildXL specific PipCacheDescriptor as to not impact other users of BuildCache.
    /// As usage is observed it may be promoted to ContentBagCommon.Provenance where it more logically belongs. A lookup
    /// to a secondary record is not being added so as to avoid the cost to change eviction policy of the cache. The size
    /// consumed by this additional info is relatively small in comparison to the overall size of the PipCacheDescriptor.
    /// </summary>
    string TraceInfo = 2;

    google.protobuf.BytesValue PathTable = 3;
    google.protobuf.BytesValue StringTable = 4;
    google.protobuf.BytesValue SymbolTable = 5;
    google.protobuf.BytesValue QualifierTable = 6;
    google.protobuf.BytesValue PipTable = 7;
    google.protobuf.BytesValue PreviousInputs = 8;
    google.protobuf.BytesValue MountPathExpander = 9;
    google.protobuf.BytesValue ConfigState = 10;
    google.protobuf.BytesValue DirectedGraph = 11;
    google.protobuf.BytesValue PipGraph = 12;
    google.protobuf.BytesValue EngineState = 13;
    google.protobuf.BytesValue HistoricTableSizes = 14;
    google.protobuf.BytesValue PipGraphId = 15;
}

/// <summary>
/// Event message for PipProcessError/PipProcessWarning.
/// Since the last four fields are present only for PipProcessError event they are made optional for PipProcessWarning.
/// </summary>
message PipProcessEvent {
    int64 PipSemiStableHash = 1;
    string PipDescription = 2;
    string PipSpecPath = 3;
    string PipWorkingDirectory = 4;
    string PipExe = 5;
    string OutputToLog = 6;
    string MessageAboutPathsToLog = 7;
    string PathsToLog = 8;
    optional int32 ExitCode = 9;
    optional string OptionalMessage = 10;
    optional string ShortPipDescription = 11;
    optional int64 PipExecutionTimeMs = 12;
}
