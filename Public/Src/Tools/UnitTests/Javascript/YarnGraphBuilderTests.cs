// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using System.Collections.Generic;
using System.IO;
using BuildXL.FrontEnd.JavaScript.ProjectGraph;
using BuildXL.FrontEnd.Yarn.ProjectGraph;
using Newtonsoft.Json;
using Test.BuildXL.TestUtilities.Xunit;
using Xunit;
using Xunit.Abstractions;

namespace Test.Tool.Javascript.YarnGraphBuilder
{
    public class YarnGraphBuilderTests : JavascriptGraphBuilderTestBase
    {
        private readonly string m_yarnWorkSpaceRoot;
        private readonly string m_yarnGraphBuilderToolRoot;

        public YarnGraphBuilderTests(ITestOutputHelper output) : base(output) 
        {
            m_yarnWorkSpaceRoot = CreateTestYarnWorkspace();
            m_yarnGraphBuilderToolRoot = Path.Combine(TestDeploymentDir, "tools", "YarnGraphBuilder", "main.js");
        }

        /// <summary>
        /// Test that a workspace is generated by yarn in the correct format.
        /// </summary>
        [Fact]
        public void TestGraphBuilder()
        {
            var outputFile = GetOutputFile();

            XAssert.IsTrue(RunGraphBuilderTool(m_yarnWorkSpaceRoot, GetYarnGraphBuilderArguments(outputFile)));
            VerifyGeneratedGraph(outputFile);
        }

        /// <summary>
        /// Tests the workspace format used by Yarn <= 1.17.3
        /// </summary>
        [Fact]
        public void TestOldFormat()
        {
            // Generated from Yarn 1.17.3
            var workspaceJson = "{\"type\":\"log\",\"data\":\"{\\n  \\\"workspace-a\\\": {\\n    \\\"location\\\": \\\"workspace-a\\\",\\n    \\\"workspaceDependencies\\\": [],\\n    \\\"mismatchedWorkspaceDependencies\\\": []\\n  }\\n}\"}";
            var testWorkspaceJsonPath = Path.Combine(TestOutputDirectory, "testWorkspace.json");
            var outputFile = GetOutputFile();
            File.WriteAllText(testWorkspaceJsonPath, workspaceJson);
                        
            XAssert.IsTrue(RunGraphBuilderTool(m_yarnWorkSpaceRoot, GetYarnGraphBuilderArguments(outputFile, testWorkspaceJsonPath)));
            VerifyGeneratedGraph(outputFile);
        }

        private string GetYarnGraphBuilderArguments(string outputFile, string testWorkspaceJsonPath = null)
        {
            return m_yarnGraphBuilderToolRoot
                + " " + m_yarnWorkSpaceRoot
                + " " + outputFile
                + " " + YarnTool
                + " true" // a boolean indicating whether to produce an error file
                + (string.IsNullOrEmpty(testWorkspaceJsonPath) ? string.Empty : " " + testWorkspaceJsonPath);
        }

        private string GetOutputFile()
        {
            return Path.Combine(TestOutputDirectory, Guid.NewGuid().ToString());
        }

        /// <summary>
        /// Generates a mock Yarn project with the following structure
        /// YarnProject/
        /// +-- package.json
        /// +-- workspace-a/
        /// |   +-- package.json
        /// </summary>
        /// <returns></returns>
        private string CreateTestYarnWorkspace()
        {
            var outputDirectory = Path.Combine(TestOutputDirectory, "YarnProject");
            var workspaceA = Path.Combine(outputDirectory, "workspace-a");
            Directory.CreateDirectory(outputDirectory);
            Directory.CreateDirectory(workspaceA);

            // Root package.json file:
            File.WriteAllText(Path.Combine(outputDirectory, "package.json"), @"
{
    ""private"": true,
    ""workspaces"": [""workspace-a""]
}");

            // workspace-a package.json
            File.WriteAllText(Path.Combine(workspaceA, "package.json"), @"
{
    ""private"": true,
    ""name"": ""workspace-a"",
    ""version"": ""1.0.0"",
    ""dependencies"": { }
}");

            return outputDirectory;
        }

        private void VerifyGeneratedGraph(string outputFile)
        {
            using var streamReader = new StreamReader(outputFile);
            using var jsonReader = new JsonTextReader(streamReader);
            var serializer = GetJavascriptGraphSerializer();
            var deserializedGraph = serializer.Deserialize<GenericJavaScriptGraph<DeserializedJavaScriptProject, YarnConfiguration>>(jsonReader);
            var projects = new List<DeserializedJavaScriptProject>(deserializedGraph.Projects);

            // Verify that the "workspace-a" project was added
            XAssert.IsTrue(projects.Count == 1);
            XAssert.IsTrue(projects[0].Name.Equals("workspace-a"));
            XAssert.IsTrue(projects[0].ProjectFolder.ToString(PathTable).Equals(Path.Combine(m_yarnWorkSpaceRoot, "workspace-a")));
        }
    }
}